'use server'

/**
 * === üõí Cart Server Actions - Next.js 15 ===
 * Actions serveur s√©curis√©es - Version temporaire pour le build
 * TODO: R√©impl√©menter avec Supabase quand les types seront corrig√©s
 */

// Types de retour
interface CartActionResult {
  success: boolean;
  data?: any;
  error?: string;
}

/**
 * R√©cup√©rer le cart complet de l'utilisateur
 * TODO: R√©impl√©menter avec Supabase client corrig√©
 */
export async function getCart(): Promise<CartActionResult> {
  return {
    success: true,
    data: { id: null, items: [], totalItems: 0, subtotal: 0 }
  };
}

/**
 * Ajouter un produit au cart
 * TODO: R√©impl√©menter avec Supabase client corrig√©
 */
export async function addToCart(_formData: FormData): Promise<CartActionResult> {
  return {
    success: true,
    data: { message: 'Produit ajout√© au panier' }
  };
}

/**
 * Mettre √† jour la quantit√© d'un item du cart
 * TODO: R√©impl√©menter avec Supabase client corrig√©
 */
export async function updateCartItem(_formData: FormData): Promise<CartActionResult> {
  return {
    success: true,
    data: { message: 'Quantit√© mise √† jour' }
  };
}

/**
 * Supprimer un produit du cart
 * TODO: R√©impl√©menter avec Supabase client corrig√©
 */
export async function removeFromCart(_formData: FormData): Promise<CartActionResult> {
  return {
    success: true,
    data: { message: 'Produit retir√© du panier' }
  };
}

/**
 * Vider compl√®tement le cart
 * TODO: R√©impl√©menter avec Supabase client corrig√©
 */
export async function clearCart(): Promise<CartActionResult> {
  return {
    success: true,
    data: { message: 'Panier vid√©' }
  };
}

/**
 * Synchroniser cart invit√© avec cart utilisateur (apr√®s login)
 * TODO: R√©impl√©menter avec Supabase client corrig√©
 */
export async function syncGuestCart(_guestCartItems: any[]): Promise<CartActionResult> {
  return {
    success: true,
    data: { message: 'Panier synchronis√©' }
  };
}